---
import type { Hreflang } from "@libs/i18n";
import Layout from "./Layout.astro";
import type { MarkdownHeading } from "astro";

interface Props {
    title: string;
    description?: string;
    pubDate?: Date;
    updatedDate?: Date;
    tags?: string[];
    heroImage?: string;
    headings: MarkdownHeading[];
    hreflang?: Hreflang[];
}

const {
    title,
    description,
    pubDate,
    updatedDate,
    tags = [],
    headings,
    hreflang,
} = Astro.props;

const lang = Astro.currentLocale;
---

<Layout title={title} description={description} hreflang={hreflang}>
    <article
        class="prose dark:prose-invert max-w-none prose-pre:bg-gray-800 prose-pre:border prose-pre:border-gray-700 flex flex-col-reverse md:flex-row gap-8"
    >
        <div>
            <div class="mb-8 not-prose">
                <h1
                    class="text-4xl font-bold text-gray-900 dark:text-white mb-4"
                >
                    {title}
                </h1>
                {
                    tags.length > 0 && (
                        <div class="flex flex-wrap gap-2 mb-4">
                            {tags.map((tag) => (
                                <a
                                    href={`/${lang}/blog/tags/${tag}`}
                                    class="text-sm px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
                                >
                                    #{tag}
                                </a>
                            ))}
                        </div>
                    )
                }
                <div class="mb-4">
                    <slot name="heroImage" />
                </div>
                <div class="text-gray-600 dark:text-gray-400">
                    <time datetime={pubDate?.toISOString()}>
                        {
                            pubDate?.toLocaleDateString(lang, {
                                year: "numeric",
                                month: "long",
                                day: "numeric",
                            })
                        }
                    </time>
                    {
                        updatedDate && (
                            <div class="mt-1 text-sm">
                                Last updated on{" "}
                                <time datetime={updatedDate.toISOString()}>
                                    {updatedDate.toLocaleDateString(lang, {
                                        year: "numeric",
                                        month: "long",
                                        day: "numeric",
                                    })}
                                </time>
                            </div>
                        )
                    }
                </div>
            </div>

            <slot />
        </div>
        <div>
            {/* TOC */}
            {
                headings.length > 0 && (
                    <div
                        id="toc-container"
                        class="toc bg-white dark:bg-gray-800 mx-auto p-4 rounded-lg shadow-lg border dark:border-gray-700 w-64 sticky top-2"
                    >
                        <div class="flex justify-between items-center mb-4">
                            <div class="font-semibold text-gray-900 dark:text-white">
                                Table of Contents
                            </div>
                        </div>
                        <div id="toc-content">
                            <ul class="space-y-2 list-none">
                                {headings.map((heading) => (
                                    <li
                                        class="toc-item"
                                    >
                                        <a
                                            href={`#${heading.slug}`}
                                            class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white block transition-colors duration-200"
                                            style={`margin-left: ${(heading.depth - 1) * 0.5}rem`}
                                        >
                                            {heading.text}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        </div>
                    </div>
                )
            }
        </div>
    </article>
</Layout>
